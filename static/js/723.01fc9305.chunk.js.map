{"version":3,"file":"static/js/723.01fc9305.chunk.js","mappings":"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","sources":["components/Form/Form.styled.jsx","components/Form/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const StyledForm = styled.form`\n  width: 300px;\n  display: flex;\n  flex-direction: column;\n  border-radius: 6px;\n  padding: 16px 32px;\n  margin-left: auto;\n  margin-right: auto;\n  gap:10px;\n\n  `;\n\nexport const StyledInput = styled.input`\n  padding: 10px;\n  border-radius: 6px;\n  background-color: white;\n`;\nexport const FormButton = styled.button`\n  margin-top: 10px;\n  padding: 10px;\n  border-radius: 6px;\n  background-color: beige;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  padding: 8px;\n  &:focus,\n  &:hover {\n    background-color: rgb(232, 232, 185);\n  }\n`;\nexport const ErrorMessage = styled.p`\n  margin: 0px;\n  padding: 0px;\n`;\n\n","import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport Notiflix from 'notiflix';\nimport * as yup from 'yup';\nimport {\n  StyledForm,\n  StyledInput,\n  FormButton,\n  ErrorMessage,\n} from './Form.styled';\n\nimport { createUser } from '../../redux/auth/authOperation';\n\n\nexport const registrationSchema = yup\n  .object()\n  .shape({\n    name: yup\n      .string()\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      )\n      .required('Name is required'),\n    email: yup.string().email('Invalid email').required('Email is required'),\n    password: yup\n      .string()\n      .min(7, 'Password must be at least 7 characters long')\n      .required('Password is required'),\n  })\n  .required();\n\nexport function RegisterForm() {\n  const dispatch = useDispatch();\n\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({\n    defaultValues: { name: '', email: '', password: '' },\n    resolver: yupResolver(registrationSchema),\n  });\n\n  const onSubmit = ({ name, email, password }) => {\n    dispatch(createUser({ name, email, password }))\n      .unwrap()\n      .then(() => Notiflix.Notify.success('Account successfully created!'))\n      .catch(e =>\n        e === 'Request failed with status code 400'\n          ? Notiflix.Notify.failure('This user already exist! Use Log In button')\n          : Notiflix.Notify.failure('Something went wrong, try one nore time!')\n      );\n    reset();\n  \n  };\n\n  return (\n    <>\n      <StyledForm onSubmit={handleSubmit(onSubmit)}>\n        <label htmlFor=\"name\">Name</label>\n        <StyledInput {...register('name')} type=\"text\" id=\"name\" />\n        <ErrorMessage>{errors.name?.message}</ErrorMessage>\n        <label htmlFor=\"email\">Email</label>\n        <StyledInput {...register('email')} type=\"email\" id=\"email\" />\n        <ErrorMessage>{errors.email?.message}</ErrorMessage>\n        <label htmlFor=\"password\">Password</label>\n        <StyledInput {...register('password')} type=\"password\" id=\"password\" />\n        <ErrorMessage>{errors.password?.message}</ErrorMessage>\n        <FormButton type=\"submit\">Register</FormButton>\n      </StyledForm>\n\n    </>\n  );\n}","import React from 'react';\nimport { RegisterForm } from '../components/Form/RegisterForm';\n\nfunction Register() {\n  return (\n    <>\n      <h3>Create an account</h3>\n      <RegisterForm />\n    </>\n  );\n}\n\nexport default Register;"],"names":["StyledForm","styled","_templateObject","_taggedTemplateLiteral","StyledInput","_templateObject2","FormButton","_templateObject3","ErrorMessage","_templateObject4","registrationSchema","yup","shape","name","matches","required","email","password","min","RegisterForm","_errors$name","_errors$email","_errors$password","dispatch","useDispatch","_useForm","useForm","defaultValues","resolver","yupResolver","register","handleSubmit","errors","formState","reset","_jsx","_Fragment","children","_jsxs","onSubmit","_ref","createUser","unwrap","then","Notiflix","catch","e","htmlFor","_objectSpread","type","id","message"],"sourceRoot":""}