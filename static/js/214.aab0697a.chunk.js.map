{"version":3,"file":"static/js/214.aab0697a.chunk.js","mappings":"+QAEaA,EAAaC,EAAAA,EAAAA,KAAWC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,oLAYxBC,EAAcH,EAAAA,EAAAA,MAAYI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,+EAK1BG,EAAaL,EAAAA,EAAAA,OAAaM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,mPAa1BK,EAAeP,EAAAA,EAAAA,EAAQQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,0C,kLClBvBO,EAAcC,EAAAA,KAExBC,MAAM,CACLC,MAAOF,EAAAA,KAAaE,MAAM,iBAAiBC,SAAS,qBACpDC,SAAUJ,EAAAA,KAEPK,IAAI,EAAG,+CACPF,SAAS,0BAEbA,WAEI,SAASG,IAAa,IAADC,EAAAC,EACpBC,GAAWC,EAAAA,EAAAA,MAGjBC,GAKIC,EAAAA,EAAAA,IAAQ,CACVC,cAAe,CAAEX,MAAO,GAAIE,SAAU,IACtCU,UAAUC,EAAAA,EAAAA,GAAYhB,KANtBiB,EAAQL,EAARK,SACAC,EAAYN,EAAZM,aACaC,EAAMP,EAAnBQ,UAAaD,OACbE,EAAKT,EAALS,MAqBF,OACEC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAACnC,EAAAA,GAAU,CAACoC,SAAUR,GAjBT,SAAHS,GAA6B,IAAvBxB,EAAKwB,EAALxB,MAAOE,EAAQsB,EAARtB,SACzBK,GAASkB,EAAAA,EAAAA,IAAM,CAAEzB,MAAAA,EAAOE,SAAAA,KACrBwB,SACAC,MAAK,SAAAC,GACJC,IAAAA,OAAAA,QAAwB,6BAADC,OAA8BF,EAAKG,KAAKC,MACjE,IACCC,OAAM,SAAAC,GACC,wCAANA,EACIL,IAAAA,OAAAA,QAAwB,2BACxBA,IAAAA,OAAAA,QAAwB,2CAC9B,IACFX,GAEF,IAIiDG,SAAA,EAC3CF,EAAAA,EAAAA,KAAA,SAAOgB,QAAQ,QAAOd,SAAC,WACvBF,EAAAA,EAAAA,KAAC5B,EAAAA,IAAW6C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKtB,EAAS,UAAQ,IAAEuB,KAAK,QAAQC,GAAG,YACpDnB,EAAAA,EAAAA,KAACxB,EAAAA,GAAY,CAAA0B,SAAc,QAAdhB,EAAEW,EAAOhB,aAAK,IAAAK,OAAA,EAAZA,EAAckC,WAC7BpB,EAAAA,EAAAA,KAAA,SAAOgB,QAAQ,WAAUd,SAAC,cAC1BF,EAAAA,EAAAA,KAAC5B,EAAAA,IAAW6C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKtB,EAAS,aAAW,IAAEuB,KAAK,WAAWC,GAAG,eAC1DnB,EAAAA,EAAAA,KAACxB,EAAAA,GAAY,CAAA0B,SAAiB,QAAjBf,EAAEU,EAAOd,gBAAQ,IAAAI,OAAA,EAAfA,EAAiBiC,WAChCpB,EAAAA,EAAAA,KAAC1B,EAAAA,GAAU,CAAC4C,KAAK,SAAQhB,SAAC,cAIlC,C,cClDA,MAbA,WACE,OACEC,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,2BACJF,EAAAA,EAAAA,KAACf,EAAS,KACVkB,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CAAI,WACKF,EAAAA,EAAAA,KAACqB,EAAAA,EAAc,CAACC,GAAG,YAAWpB,SAAC,aAAyB,gCAKvE,C","sources":["components/Form/Form.styled.jsx","components/Form/LoginForm.jsx","pages/Login.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const StyledForm = styled.form`\n  width: 300px;\n  display: flex;\n  flex-direction: column;\n  border-radius: 6px;\n  padding: 16px 32px;\n  margin-left: auto;\n  margin-right: auto;\n  gap:10px;\n\n  `;\n\nexport const StyledInput = styled.input`\n  padding: 10px;\n  border-radius: 6px;\n  background-color: white;\n`;\nexport const FormButton = styled.button`\n  margin-top: 10px;\n  padding: 10px;\n  border-radius: 6px;\n  background-color: beige;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  padding: 8px;\n  &:focus,\n  &:hover {\n    background-color: rgb(232, 232, 185);\n  }\n`;\nexport const ErrorMessage = styled.p`\n  margin: 0px;\n  padding: 0px;\n`;\n\n","import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport Notiflix from 'notiflix';\nimport * as yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport {\n  StyledForm,\n  StyledInput,\n  FormButton,\n  ErrorMessage,\n} from './Form.styled';\nimport { logIn } from '../../redux/auth/authOperation';\n\nexport const loginSchema = yup\n  .object()\n  .shape({\n    email: yup.string().email('Invalid email').required('Email is required'),\n    password: yup\n      .string()\n      .min(7, 'Password must be at least 7 characters long')\n      .required('Password is required'),\n  })\n  .required();\n\nexport function LoginForm() {\n  const dispatch = useDispatch();\n\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({\n    defaultValues: { email: '', password: '' },\n    resolver: yupResolver(loginSchema),\n  });\n\n  const onSubmit = ({ email, password }) => {\n    dispatch(logIn({ email, password }))\n      .unwrap()\n      .then(resp => {\n        Notiflix.Notify.success(`Successfully logged in as ${resp.user.name}`);\n      })\n      .catch(e => {\n        e === 'Request failed with status code 400'\n          ? Notiflix.Notify.failure('Wrong email or password')\n          : Notiflix.Notify.failure('Something went wrong, try one nore time!');\n      });\n    reset();\n    \n  };\n\n  return (\n    <>\n      <StyledForm onSubmit={handleSubmit(onSubmit)}>\n        <label htmlFor=\"email\">Email</label>\n        <StyledInput {...register('email')} type=\"email\" id=\"email\" />\n        <ErrorMessage>{errors.email?.message}</ErrorMessage>\n        <label htmlFor=\"password\">Password</label>\n        <StyledInput {...register('password')} type=\"password\" id=\"password\" />\n        <ErrorMessage>{errors.password?.message}</ErrorMessage>\n        <FormButton type=\"submit\">Login</FormButton>\n      </StyledForm>\n    </>\n  );\n}","import React from 'react';\nimport { LoginForm } from '../components/Form/LoginForm';\nimport { NavigationLink } from '../components/AuthNav/AuthNav.styled';\n\nfunction Login() {\n  return (\n    <>\n      <h3>Login to your account</h3>\n      <LoginForm />\n      <h4>\n        Or use <NavigationLink to=\"/register\">Register</NavigationLink> to\n        create a new account\n      </h4>\n    </>\n  );\n}\n\nexport default Login;"],"names":["StyledForm","styled","_templateObject","_taggedTemplateLiteral","StyledInput","_templateObject2","FormButton","_templateObject3","ErrorMessage","_templateObject4","loginSchema","yup","shape","email","required","password","min","LoginForm","_errors$email","_errors$password","dispatch","useDispatch","_useForm","useForm","defaultValues","resolver","yupResolver","register","handleSubmit","errors","formState","reset","_jsx","_Fragment","children","_jsxs","onSubmit","_ref","logIn","unwrap","then","resp","Notiflix","concat","user","name","catch","e","htmlFor","_objectSpread","type","id","message","NavigationLink","to"],"sourceRoot":""}